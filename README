TRAINING/TESTING SETS CAN BE FOUND HERE: https://drive.google.com/file/d/1uBnC-LKHaGwaykRpcLzAvyCsPSI1efCD/view?usp=sharing

The basic workflow with this code is:

- (Optional) Train a VAE using the training set located at the above link. This has already been done and I've just included the code here in case you'd like to retrain the VAE for some reason.

- Assess the quality of your VAE with latent_visualisations/assess_vae.ipynb using the testing set found at the above link. This calculates some metrics such as the mean squared error for each parameter and the Pearson correlation coefficient between input/output. It also generates some nice looking plots for each parameter. 

- Use latent_visualisations to pick point(s) of interest. This should be fairly straighforward to use. The very last cell in the jupyter notebook is mainly what I used for poking around for interesting points, however feel free to do this in any way that works for you. 

- Generate a slha file using gambit or some other method (not included here)

- Generate events in madgraph. ***NOTE THE FILE "Cards/delphes_card_ATLAS.tcl" IS IMPORTANT AND SHOULD BE MOVED TO YOUR "Delphes/cards" FOLDER IN MADGRAPH*** I have included some helpful files for you to use once madgraph is installed. convert.py copies and converts your slha file into a .dat file suitable for use with madgraph and places it in the same directory as the original. Use it by typing "python </path/to/slha_file.shla2>". It accepts multiple files at once so go nuts. generate_all.py is the workhorse for the event generation process. It uses cards stored in the "Cards" folder to generate events automatically. You don't need to change any of the cards in there unless you want to (for example changing the number of events generated in run_card.dat. By default it's 10000 events). Simply specify the model .dat file(s) which were generated by convert.py, and the processes to generate. There are a few .cmnd files which generate_all.py can use. The default one is mg5_commants_jets.cmnd which generates events with jets. One that might be useful is mg5_calc_xsec.cmnd which just calculates cross sections and prints it to the screen - much faster than generating and saving all the events.

- Once you have a root file(s) for your desired model/process(es) you can run an analysis. The first step is doing a skim and reducing the size of the file/converting it to a more usable .csv file. skim_root.ipynb will do this for you. I have included skimmed background data with a simple ==3-lepton preselection. If you don't want to use a ==3-lepton final state in your analysis you'll have to get ahold of the original csv files and skim them yourself with skim_bkg.py. These files are rather large so I haven't included them but if you email me I can probably send them to you.

- Now it's time to run your analysis. There's an example in "analysis/onshell" but you'll likely have to change it. The physical variables are calculated in onshell_analysis.py. You can ignore the "valid" boolean, that's old and unused. analysis.ipynb loads your skimmed background and signal csv files and calculates the physical variables specified in onshell_analysis.py. The final few cells are where the analysis is really done. There's a block of code that generates random cuts to perform and there's a block of code with user-defined cuts. Comment these as you wish. For exploratory first analyses it's useful to just have it run random cuts and see what works. There are some commented blocks of code which are designed for running random cuts and only printing details when a set of cuts improves the sigma. Use these as you wish. You can also comment out the section that displays histograms for a given variable if you don't want that.

Hopefully this is somewhat clear. Most of the filepaths in here are unmodified from my original machine so you'll need to change them to suit your needs. The code should hopefully be fairly easy to read and understand but of course send me an email if anything is horribly unclear.

Adam Leinweber
adamisradam72@gmail.com
adam.leinweber@adelaide.edu.au
